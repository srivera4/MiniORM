using Microsoft.CSharp;
using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace System.Data
{
    public static class DataTableExtensions
    {
        public static string DataTableToClass(this DataTable dt)
        {
            var className = dt.TableName;

            if (string.IsNullOrWhiteSpace(className))
            {
                className = "UnKnown";
            }

            //Create the class
            CodeTypeDeclaration codeClass = CreateClass(className);

            //Add public properties
            foreach (DataColumn column in dt.Columns)
            {
                codeClass.Members.Add(CreateProperty(column.ColumnName, column.DataType));
            }

            //Add class to Namespace
            var nameSpace = "AutoGeneratedDomainModels";
            CodeNamespace codeNamespace = new CodeNamespace(nameSpace);
            codeNamespace.Types.Add(codeClass);

            //Generate Code
            var fileName = string.Format("{0}.{1}.cs", nameSpace, className);
            CreateCodeFile(fileName, codeNamespace);

            return fileName;
        }

        static CodeMemberField CreateProperty(string name, Type type)
        {
            // This is a little hack. Since you cant create auto properties in CodeDOM,
            //  we make the getter and setter part of the member name.
            // This leaves behind a trailing semicolon that we comment out.
            //  Later, we remove the commented out semicolons.
            string memberName = name + "\t{ get; set; }//";

            CodeMemberField result = new CodeMemberField(type, memberName);
            result.Attributes = MemberAttributes.Public | MemberAttributes.Final;

            return result;
        }

        public static CodeTypeDeclaration CreateClass(string name)
        {
            CodeTypeDeclaration result = new CodeTypeDeclaration(name);
            result.Attributes = MemberAttributes.Public;
            result.Members.Add(CreateConstructor(name)); // Add class constructor
            return result;
        }

        static CodeConstructor CreateConstructor(string className)
        {
            CodeConstructor result = new CodeConstructor();
            result.Attributes = MemberAttributes.Public;
            result.Name = className;
            return result;
        }

        static void CreateCodeFile(string filename, CodeNamespace codeNamespace)
        {
            // CodeGeneratorOptions so the output is clean and easy to read
            CodeGeneratorOptions codeOptions = new CodeGeneratorOptions();
            codeOptions.BlankLinesBetweenMembers = false;
            codeOptions.VerbatimOrder = true;
            codeOptions.BracingStyle = "C";
            codeOptions.IndentString = "\t";

            // Create the code file
            using (TextWriter textWriter = new StreamWriter(filename))
            {
                CSharpCodeProvider codeProvider = new CSharpCodeProvider();
                codeProvider.GenerateCodeFromNamespace(codeNamespace, textWriter, codeOptions);
            }

            // Correct our little auto-property 'hack'
            File.WriteAllText(filename, File.ReadAllText(filename).Replace("//;", ""));
        }

    }
}
