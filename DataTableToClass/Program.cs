using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AutoGeneratedDomainModels;
using System.Reflection;

namespace DataTableToClass
{
    class Program
    {
        static void Main(string[] args)
        {
            DataTable table = new DataTable("Prescription");
            table.Columns.Add("Dosage", typeof(int));
            table.Columns.Add("Drug", typeof(string));
            table.Columns.Add("Patient", typeof(string));
            table.Columns.Add("Date", typeof(DateTime));

            table.Rows.Add(25, "Indocin", "David", DateTime.Now);
            table.Rows.Add(50, "Enebrel", "Sam", DateTime.Now);
            table.Rows.Add(10, "Hydralazine", "Christoff", DateTime.Now);
            table.Rows.Add(21, "Combivent", "Janet", DateTime.Now);
            table.Rows.Add(100, "Dilantin", "Melanie", DateTime.Now);
            // Create a DataSet and put both tables in it.
            DataSet set = new DataSet("office");
            set.Tables.Add(table);

            table.DataTableToClass();

            dynamic databaseStuff = new ExpandoObject();
            int i = 0;
            foreach (DataColumn column in table.Columns)
            {
                ((IDictionary<string, object>)databaseStuff).Add(column.ColumnName, table.Rows[i][column.ColumnName]);
                i += 1;
            }

            // get settable public properties of the type
            var props = typeof(Prescription).GetProperties(BindingFlags.Public | BindingFlags.Instance)
                .Where(x => x.GetSetMethod() != null);

            // create an instance of the type
            var obj = Activator.CreateInstance(typeof(Prescription));

            // set property values using reflection
            var values = (IDictionary<string, object>)databaseStuff;
            foreach (var prop in props)
                prop.SetValue(obj, values[prop.Name]);

        }
    }
}
